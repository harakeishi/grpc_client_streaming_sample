package main

import (
	"context"
	"fmt"
	"net/http"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	sampleStreamv1 "grpc_client_streaming_sample/gen/sample_stream/v1"        // generated by protoc-gen-go
	"grpc_client_streaming_sample/gen/sample_stream/v1/sampleStreamv1connect" // generated by protoc-gen-connect-go
)

type SampleStreamServer struct{}

func (s *SampleStreamServer) SampleClientStream(ctx context.Context, stream *connect.ClientStream[sampleStreamv1.SampleClientStreamRequest]) (*connect.Response[sampleStreamv1.SampleClientStreamResponse], error) {
	var fileInfo sampleStreamv1.SampleClientStreamRequest_FileInfo
	var data []byte

	for stream.Receive() {
		if stream.Msg().GetFileInfo() != nil {
			fileInfo = *stream.Msg().GetFileInfo()
		}
		if stream.Msg().GetData() != nil {
			data = append(data, stream.Msg().GetData()...)
		}
	}

	fmt.Printf("fileinfo:%+v", fileInfo)
	fmt.Printf("data:%s\n", data)

	return connect.NewResponse(&sampleStreamv1.SampleClientStreamResponse{}), nil
}

func main() {
	sampleStreamer := &SampleStreamServer{}
	mux := http.NewServeMux()
	path, handler := sampleStreamv1connect.NewSampleStreamServiceHandler(sampleStreamer)
	mux.Handle(path, handler)
	http.ListenAndServeTLS(
		"127.0.0.1:443",
		"../../server.crt",
		"../../server.key",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)

}
