package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	sampleStreamv1 "grpc_client_streaming_sample/gen/sampleStream/v1" // generated by protoc-gen-go
	"grpc_client_streaming_sample/gen/sampleStream/v1/connect"        // generated by protoc-gen-connect-go
	"grpc_client_streaming_sample/gen/sample_stream/v1/sampleStreamv1connect"
)

type SampleStreamServer struct{}

func (s *SampleStreamServer) SampleClientStream(
	ctx context.Context,
	req *connect.Request[sampleStreamv1.SampleClientStreamRequest],
) (*connect.Response[sampleStreamv1.SampleClientStreamResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&sampleStreamv1.SampleClientStreamResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func main() {
	sampleStreamer := &SampleStreamServer{}
	mux := http.NewServeMux()
	path, handler := sampleStreamv1connect.NewSampleStreamServiceHandler(sampleStreamer)
	mux.Handle(path, handler)
	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
