package server

import (
	"context"
	"errors"
	"net"
	"net/http"

	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	// generated by protoc-gen-go
	"grpc_client_streaming_sample/gen/sample_stream/v1/sampleStreamv1connect" // generated by protoc-gen-connect-go
	"grpc_client_streaming_sample/service"
)

type Server struct {
	srv *http.Server
}

func New() (*Server, error) {
	mux := http.NewServeMux()
	sampleStreamer := &service.SampleStreamServer{}
	mux.Handle(sampleStreamv1connect.NewSampleStreamServiceHandler(sampleStreamer))
	srv := &http.Server{
		Addr:    "127.0.0.1:8080",
		Handler: h2c.NewHandler(mux, &http2.Server{}),
	}
	return &Server{srv: srv}, nil
}

func (s *Server) Serve(ctx context.Context) error {
	// リスナーの設定
	ln, err := net.Listen("tcp", s.srv.Addr)
	if err != nil {
		return err
	}
	defer ln.Close()

	if err := s.srv.Serve(ln); err != nil && !errors.Is(err, http.ErrServerClosed) {
		return err
	}
	return nil
}
